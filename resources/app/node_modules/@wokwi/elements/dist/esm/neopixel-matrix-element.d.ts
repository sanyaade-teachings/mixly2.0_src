import { LitElement } from 'lit';
import { ElementPin } from './pin';
import { RGB } from './types/rgb';
/**
 * Renders a matrix of NeoPixels (smart RGB LEDs).
 * Optimized for displaying large matrices (up to thousands of elements).
 *
 * The color of individual pixels can be set by calling `setPixel(row, col, { r, g, b })`
 * on this element, e.g. `element.setPixel(0, 0, { r: 1, g: 0, b: 0 })` to set the leftmost
 * pixel to red.
 */
export declare class NeopixelMatrixElement extends LitElement {
    /**
     * Number of rows in the matrix
     */
    rows: number;
    /**
     * Number of columns in the matrix
     */
    cols: number;
    /**
     * The spacing between two adjacent rows, in mm
     */
    rowSpacing: number;
    /**
     * The spacing between two adjacent columns, in mm
     */
    colSpacing: number;
    /**
     * Whether to apply blur to the light. Blurring the light
     * creates a bit more realistic look, but negatively impacts
     * performance. It's recommended to leave this off for large
     * matrices.
     */
    blurLight: boolean;
    /**
     * Animate the LEDs in the matrix. Used primarily for testing in Storybook.
     * The animation sequence is not guaranteed and may change in future releases of
     * this element.
     */
    animation: boolean;
    get pinInfo(): ElementPin[];
    private pixelElements;
    private animationFrame;
    static get styles(): import("lit").CSSResult;
    private getPixelElements;
    /**
     * Resets all the pixels to off state (r=0, g=0, b=0).
     */
    reset(): void;
    /**
     * Sets the color of a single neopixel in the matrix
     * @param row Row number of the pixel to set
     * @param col Column number of the pixel to set
     * @param rgb An object containing the {r, g, b} values for the pixel
     */
    setPixel(row: number, col: number, rgb: RGB): null | undefined;
    private animateStep;
    updated(): void;
    private renderPixels;
    render(): import("lit-html").TemplateResult<1>;
}
