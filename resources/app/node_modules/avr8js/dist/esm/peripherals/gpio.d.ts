/**
 * AVR-8 GPIO Port implementation
 * Part of AVR8js
 * Reference: http://ww1.microchip.com/downloads/en/DeviceDoc/ATmega48A-PA-88A-PA-168A-PA-328-P-DS-DS40002061A.pdf
 *
 * Copyright (C) 2019, 2020, 2021 Uri Shaked
 */
import { CPU } from '../cpu/cpu';
import { u8 } from '../types';
export interface AVRExternalInterrupt {
    EICRA: u8;
    EICRB: u8;
    EIMSK: u8;
    EIFR: u8;
    index: u8;
    interrupt: u8;
}
export interface AVRPinChangeInterrupt {
    PCIE: u8;
    PCICR: u8;
    PCIFR: u8;
    PCMSK: u8;
    pinChangeInterrupt: u8;
    mask: u8;
    offset: u8;
}
export interface AVRPortConfig {
    PIN: u8;
    DDR: u8;
    PORT: u8;
    pinChange?: AVRPinChangeInterrupt;
    externalInterrupts: (AVRExternalInterrupt | null)[];
}
export declare const INT0: AVRExternalInterrupt;
export declare const INT1: AVRExternalInterrupt;
export declare const PCINT0: {
    PCIE: number;
    PCICR: number;
    PCIFR: number;
    PCMSK: number;
    pinChangeInterrupt: number;
    mask: number;
    offset: number;
};
export declare const PCINT1: {
    PCIE: number;
    PCICR: number;
    PCIFR: number;
    PCMSK: number;
    pinChangeInterrupt: number;
    mask: number;
    offset: number;
};
export declare const PCINT2: {
    PCIE: number;
    PCICR: number;
    PCIFR: number;
    PCMSK: number;
    pinChangeInterrupt: number;
    mask: number;
    offset: number;
};
export declare type GPIOListener = (value: u8, oldValue: u8) => void;
export declare type ExternalClockListener = (pinValue: boolean) => void;
export declare const portAConfig: AVRPortConfig;
export declare const portBConfig: AVRPortConfig;
export declare const portCConfig: AVRPortConfig;
export declare const portDConfig: AVRPortConfig;
export declare const portEConfig: AVRPortConfig;
export declare const portFConfig: AVRPortConfig;
export declare const portGConfig: AVRPortConfig;
export declare const portHConfig: AVRPortConfig;
export declare const portJConfig: AVRPortConfig;
export declare const portKConfig: AVRPortConfig;
export declare const portLConfig: AVRPortConfig;
export declare enum PinState {
    Low = 0,
    High = 1,
    Input = 2,
    InputPullUp = 3
}
export declare enum PinOverrideMode {
    None = 0,
    Enable = 1,
    Set = 2,
    Clear = 3,
    Toggle = 4
}
export declare class AVRIOPort {
    private cpu;
    readonly portConfig: Readonly<AVRPortConfig>;
    readonly externalClockListeners: (ExternalClockListener | null)[];
    private readonly externalInts;
    private readonly PCINT;
    private listeners;
    private pinValue;
    private overrideMask;
    private overrideValue;
    private lastValue;
    private lastDdr;
    private lastPin;
    openCollector: u8;
    constructor(cpu: CPU, portConfig: Readonly<AVRPortConfig>);
    addListener(listener: GPIOListener): void;
    removeListener(listener: GPIOListener): void;
    /**
     * Get the state of a given GPIO pin
     *
     * @param index Pin index to return from 0 to 7
     * @returns PinState.Low or PinState.High if the pin is set to output, PinState.Input if the pin is set
     *   to input, and PinState.InputPullUp if the pin is set to input and the internal pull-up resistor has
     *   been enabled.
     */
    pinState(index: number): PinState;
    /**
     * Sets the input value for the given pin. This is the value that
     * will be returned when reading from the PIN register.
     */
    setPin(index: number, value: boolean): void;
    /**
     * Internal method - do not call this directly!
     * Used by the timer compare output units to override GPIO pins.
     */
    timerOverridePin(pin: u8, mode: PinOverrideMode): void;
    private updatePinRegister;
    private toggleInterrupt;
    private attachInterruptHook;
    private checkExternalInterrupts;
    private writeGpio;
}
