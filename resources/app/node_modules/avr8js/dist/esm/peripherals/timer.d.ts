/**
 * AVR-8 Timers
 * Part of AVR8js
 * Reference: http://ww1.microchip.com/downloads/en/DeviceDoc/ATmega48A-PA-88A-PA-168A-PA-328-P-DS-DS40002061A.pdf
 *
 * Copyright (C) 2019, 2020, 2021 Uri Shaked
 */
import { CPU } from '../cpu/cpu';
declare type u8 = number;
declare type u16 = number;
interface TimerDividers {
    0: number;
    1: number;
    2: number;
    3: number;
    4: number;
    5: number;
    6: number;
    7: number;
}
export interface AVRTimerConfig {
    bits: 8 | 16;
    dividers: TimerDividers;
    captureInterrupt: u8;
    compAInterrupt: u8;
    compBInterrupt: u8;
    compCInterrupt: u8;
    ovfInterrupt: u8;
    TIFR: u8;
    OCRA: u8;
    OCRB: u8;
    OCRC: u8;
    ICR: u8;
    TCNT: u8;
    TCCRA: u8;
    TCCRB: u8;
    TCCRC: u8;
    TIMSK: u8;
    TOV: u8;
    OCFA: u8;
    OCFB: u8;
    OCFC: u8;
    TOIE: u8;
    OCIEA: u8;
    OCIEB: u8;
    OCIEC: u8;
    compPortA: u16;
    compPinA: u8;
    compPortB: u16;
    compPinB: u8;
    compPortC: u16;
    compPinC: u16;
    externalClockPort: u16;
    externalClockPin: u8;
}
export declare const timer0Config: AVRTimerConfig;
export declare const timer1Config: AVRTimerConfig;
export declare const timer2Config: AVRTimerConfig;
export declare class AVRTimer {
    private cpu;
    private config;
    private readonly MAX;
    private lastCycle;
    private ocrA;
    private nextOcrA;
    private ocrB;
    private nextOcrB;
    private hasOCRC;
    private ocrC;
    private nextOcrC;
    private ocrUpdateMode;
    private tovUpdateMode;
    private icr;
    private timerMode;
    private topValue;
    private tcnt;
    private tcntNext;
    private compA;
    private compB;
    private compC;
    private tcntUpdated;
    private updateDivider;
    private countingUp;
    private divider;
    private externalClockPort?;
    private externalClockRisingEdge;
    private highByteTemp;
    private OVF;
    private OCFA;
    private OCFB;
    private OCFC;
    constructor(cpu: CPU, config: AVRTimerConfig);
    reset(): void;
    get TCCRA(): number;
    get TCCRB(): number;
    get TIMSK(): number;
    get CS(): 0 | 2 | 1 | 7 | 6 | 5 | 4 | 3;
    get WGM(): number;
    get TOP(): number;
    get ocrMask(): 255 | 65535 | 1023 | 511;
    /** Expose the raw value of TCNT, for use by the unit tests */
    get debugTCNT(): number;
    private updateWGMConfig;
    count: (reschedule?: boolean, external?: boolean) => void;
    private externalClockCallback;
    private phasePwmCount;
    private timerUpdated;
    private checkForceCompare;
    private updateCompPin;
    private updateCompA;
    private updateCompB;
    private updateCompC;
}
export {};
