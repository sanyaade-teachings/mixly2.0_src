/**
 * AVR-8 USART Peripheral
 * Part of AVR8js
 * Reference: http://ww1.microchip.com/downloads/en/DeviceDoc/ATmega48A-PA-88A-PA-168A-PA-328-P-DS-DS40002061A.pdf
 *
 * Copyright (C) 2019, 2020, 2021 Uri Shaked
 */
import { CPU } from '../cpu/cpu';
import { u8 } from '../types';
export interface USARTConfig {
    rxCompleteInterrupt: u8;
    dataRegisterEmptyInterrupt: u8;
    txCompleteInterrupt: u8;
    UCSRA: u8;
    UCSRB: u8;
    UCSRC: u8;
    UBRRL: u8;
    UBRRH: u8;
    UDR: u8;
}
export declare const usart0Config: USARTConfig;
export declare type USARTTransmitCallback = (value: u8) => void;
export declare type USARTLineTransmitCallback = (value: string) => void;
export declare type USARTConfigurationChangeCallback = () => void;
export declare class AVRUSART {
    private cpu;
    private config;
    private freqHz;
    onByteTransmit: USARTTransmitCallback | null;
    onLineTransmit: USARTLineTransmitCallback | null;
    onRxComplete: (() => void) | null;
    onConfigurationChange: USARTConfigurationChangeCallback | null;
    private rxBusyValue;
    private rxByte;
    private lineBuffer;
    private RXC;
    private UDRE;
    private TXC;
    constructor(cpu: CPU, config: USARTConfig, freqHz: number);
    reset(): void;
    get rxBusy(): boolean;
    writeByte(value: number, immediate?: boolean): boolean | undefined;
    private get cyclesPerChar();
    private get UBRR();
    private get multiplier();
    get rxEnable(): boolean;
    get txEnable(): boolean;
    get baudRate(): number;
    get bitsPerChar(): 6 | 8 | 5 | 7 | 9;
    get stopBits(): 2 | 1;
    get parityEnabled(): boolean;
    get parityOdd(): boolean;
}
