/**
 * Assemble AVR programs into a list of bytes.
 * Based on code from https://github.com/tadpol/Avrian-Jump,
 * refactored to TypeScript by Uri Shaked.
 *
 * This was written with http://www.atmel.com/atmel/acrobat/doc0856.pdf
 * It is a bit short of features often found in an assembler, but there is enough here to build
 * simple programs and run them.
 *
 * It would be nice someday to add device support, just to give errors on unsupported
 * instructions.  Macros would be nice too.
 *
 * Copyright (C) 2020, Uri Shaked
 * Copyright (c) 2012 Michael Conrad Tadpol Tilstra
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
export interface LabelTable {
    [key: string]: number;
}
declare type Pass1Bytes = string | ((l: LabelTable) => string) | string[] | [(l: LabelTable) => [string, string], string];
interface LineTablePass1 {
    line: number;
    bytes: Pass1Bytes;
    text: string;
    byteOffset: number;
}
export interface LineTable extends LineTablePass1 {
    bytes: string;
}
/**
 * The assembler.
 */
export declare function assemble(input: string): {
    errors: string[];
    bytes: Uint8Array;
    lines: LineTable[];
    labels: LabelTable;
};
export {};
